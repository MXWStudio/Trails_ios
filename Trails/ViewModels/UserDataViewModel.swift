import SwiftUI
import Supabase


// DateFormatter Êâ©Â±ï
extension DateFormatter {
    static let shortDate: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        return formatter
    }()
}

@MainActor // Á°Æ‰øùÊâÄÊúâÂØπ @Published Â±ûÊÄßÁöÑ‰øÆÊîπÈÉΩÂú®‰∏ªÁ∫øÁ®ã‰∏ä
class UserDataViewModel: ObservableObject {
    // ‰ªé Supabase Âä†ËΩΩÁöÑÁî®Êà∑Êï∞ÊçÆ
    @Published var user: UserData?
    
    // Êú¨Âú∞ÁÆ°ÁêÜÁöÑÊ∏∏ÊàèÂåñÊï∞ÊçÆ (Êú™Êù•‰πüÂèØ‰ª•‰ªé Supabase Âä†ËΩΩ)
    @Published var achievements: [Achievement] = Achievement.sampleAchievements
    @Published var dailyQuests: [DailyQuest] = [
        DailyQuest(title: "ËµöÂèñ 100 ÁªèÈ™å", progress: 0, target: 100, rewardCoins: 10),
        DailyQuest(title: "ÂÆåÊàê 1 Ê¨° 2 ÂÖ¨Èáå‰ª•‰∏äÁöÑË∑ëÊ≠•", progress: 0, target: 1, rewardCoins: 20),
        DailyQuest(title: "ÁáÉÁÉß 300 Â§ßÂç°", progress: 0, target: 300, rewardCoins: 15)
    ]
    
    init() {
        // ÁõëÂê¨Áî®Êà∑ËÆ§ËØÅÊàêÂäüÁöÑÈÄöÁü•
        NotificationCenter.default.addObserver(
            forName: .userDidAuthenticate,
            object: nil,
            queue: .main
        ) { _ in
            Task {
                await self.fetchCurrentUserProfile()
            }
        }
    }
    
    // --- Supabase Êï∞ÊçÆ‰∫§‰∫í ---
    
    func fetchCurrentUserProfile() async {
        print("üë§ ÂºÄÂßãËé∑ÂèñÁî®Êà∑ËµÑÊñô...")
        guard let currentUserID = try? await SupabaseManager.shared.client.auth.session.user.id else {
            print("‚ùå Ê≤°ÊúâÊ¥ªË∑ÉÁöÑÁî®Êà∑‰ºöËØù")
            return
        }
        
        print("üÜî ÂΩìÂâçÁî®Êà∑ID: \(currentUserID)")
        
        do {
            print("üóÑÔ∏è Ê≠£Âú®‰ªé profiles Ë°®Êü•ËØ¢Áî®Êà∑ËµÑÊñô...")
            let profile: UserData = try await SupabaseManager.shared.client
                .from("profiles")
                .select()
                .eq("id", value: currentUserID)
                .single()
                .execute()
                .value
                
            print("‚úÖ ÊàêÂäüËé∑ÂèñÁî®Êà∑ËµÑÊñô: \(profile.name)")
            self.user = profile
        } catch {
            print("‚ùå Ëé∑ÂèñÁî®Êà∑ËµÑÊñôÂ§±Ë¥•: \(error)")
            print("‚ùå ÈîôËØØËØ¶ÊÉÖ: \(error.localizedDescription)")
            print("üîÑ ÂáÜÂ§á‰∏∫Áî®Êà∑ÂàõÂª∫Êñ∞ÁöÑËµÑÊñô...")
            // Â¶ÇÊûúÁî®Êà∑ËµÑÊñô‰∏çÂ≠òÂú®ÔºåÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ
            await createNewUserProfile(userID: currentUserID)
        }
    }
    
    func createNewUserProfile(userID: UUID) async {
        print("üÜï ÂºÄÂßãÂàõÂª∫Êñ∞ÁöÑÁî®Êà∑ËµÑÊñôÔºåÁî®Êà∑ID: \(userID)")
        
        let newUser = UserData(
            id: userID,
            name: "Êñ∞Áî®Êà∑",
            avatarURL: nil,
            age: nil,
            heightCM: nil,
            customTitle: nil,
            totalXP: 0,
            joinYear: Calendar.current.component(.year, from: Date()),
            followers: 0,
            following: 0,
            streakDays: 0,
            league: "ÈùíÈìú",
            coins: 50,
            weightKG: 70.0,
            preferredIntensity: .moderate,
            favoriteActivities: [],
            firsts: [
                UserFirstRecord(title: "Á¨¨‰∏ÄÊ¨°‰ΩøÁî® Trails", date: DateFormatter.shortDate.string(from: Date()), icon: "sparkles")
            ],
            team: nil,
            companion: CompanionIP(),
            ownedDecorations: [
                DecorationItem(name: "Â∞èËä±", imageName: "flower.fill"),
                DecorationItem(name: "ÂÆùÁü≥", imageName: "gem.fill")
            ]
        )
        
        print("üìù Áî®Êà∑ËµÑÊñôÊï∞ÊçÆÂ∑≤ÂáÜÂ§áÂÆåÊàê")
        print("üîÑ Â∞ùËØïÂ∞ÜÁî®Êà∑ËµÑÊñô‰øùÂ≠òÂà∞ Supabase...")
        
        do {
            try await SupabaseManager.shared.client
                .from("profiles")
                .insert(newUser, returning: .minimal)
                .execute()
            
            print("‚úÖ ÊàêÂäüÂàõÂª∫Áî®Êà∑ËµÑÊñôÂà∞Êï∞ÊçÆÂ∫ì")
            self.user = newUser
            print("üéâ Êñ∞Áî®Êà∑ËµÑÊñôÂàõÂª∫ÂÆåÊàê")
        } catch {
            print("‚ùå ÂàõÂª∫Áî®Êà∑ËµÑÊñôÂ§±Ë¥•: \(error)")
            print("‚ùå ÈîôËØØËØ¶ÊÉÖ: \(error.localizedDescription)")
            print("üîÑ ‰ΩøÁî®‰∏¥Êó∂ÂÆûÁé∞Ôºö‰ªÖËÆæÁΩÆÊú¨Âú∞Áî®Êà∑Êï∞ÊçÆ")
            // Â¶ÇÊûúÊï∞ÊçÆÂ∫ìÊìç‰ΩúÂ§±Ë¥•ÔºåËá≥Â∞ëËÆæÁΩÆÊú¨Âú∞Êï∞ÊçÆÔºåÈÅøÂÖçÂ∫îÁî®Âç°‰Ωè
            self.user = newUser
        }
    }
    
    func createDefaultUserProfile() async {
        await createNewUserProfile(userID: UUID())
    }
    
    func updateUserProfile() async {
        guard let userToUpdate = user else { return }
        
        print("üìù ÂáÜÂ§áÊõ¥Êñ∞Áî®Êà∑ËµÑÊñô...")
        print("üÜî Áî®Êà∑ID: \(userToUpdate.id)")
        print("üë§ Áî®Êà∑ÂßìÂêç: \(userToUpdate.name)")
        
        do {
            try await SupabaseManager.shared.client
                .from("profiles")
                .update(userToUpdate, returning: .minimal)
                .eq("id", value: userToUpdate.id)
                .execute()
            print("‚úÖ ÊàêÂäüÊõ¥Êñ∞Áî®Êà∑ËµÑÊñôÂà∞Êï∞ÊçÆÂ∫ì")
        } catch {
            print("‚ùå Êõ¥Êñ∞Áî®Êà∑ËµÑÊñôÂ§±Ë¥•: \(error)")
            print("‚ùå ÈîôËØØËØ¶ÊÉÖ: \(error.localizedDescription)")
            // Âç≥‰ΩøÊï∞ÊçÆÂ∫ìÊõ¥Êñ∞Â§±Ë¥•ÔºåÊú¨Âú∞Êï∞ÊçÆÂ∑≤ÁªèÊõ¥Êñ∞Ôºå‰øùÊåÅÂ∫îÁî®ÂèØÁî®ÊÄß
        }
    }
    
    // Êñ∞Â¢ûÔºö‰∏ìÈó®Áî®‰∫éÊõ¥Êñ∞‰∏™‰∫∫‰ø°ÊÅØÁöÑÊñπÊ≥ï
    func updatePersonalInfo(name: String?, age: Int?, heightCM: Double?, weightKG: Double?, customTitle: String? = nil, avatarURL: String? = nil) async {
        guard user != nil else { return }
        
        // Êõ¥Êñ∞Êú¨Âú∞Êï∞ÊçÆ
        if let name = name { user?.name = name }
        if let age = age { user?.age = age }
        if let height = heightCM { user?.heightCM = height }
        if let weight = weightKG { user?.weightKG = weight }
        if let title = customTitle { user?.customTitle = title }
        if let avatarURL = avatarURL { user?.avatarURL = avatarURL }
        
        // ÂêåÊ≠•Âà∞‰∫ëÁ´Ø
        await updateUserProfile()
    }
    
    // --- Êú¨Âú∞Ê∏∏ÊàèÂåñÈÄªËæë (‰ºöËß¶Âèë‰∫ëÁ´ØÂêåÊ≠•) ---
    
    func addXP(_ amount: Int) {
        guard user != nil else { return }
        user?.totalXP += amount
        
        if let index = dailyQuests.firstIndex(where: { $0.title.contains("ÁªèÈ™å") }) {
            dailyQuests[index].progress += amount
        }
        
        // ‰øÆÊîπÂêéÔºåËá™Âä®‰øùÂ≠òÂà∞‰∫ëÁ´Ø
        Task { await updateUserProfile() }
    }
    
    func addCoins(_ amount: Int) {
        guard user != nil else { return }
        user?.coins += amount
        Task { await updateUserProfile() }
    }

    func levelUpCompanion() {
        guard user != nil else { return }
        user?.companion.level += 1
        Task { await updateUserProfile() }
    }
    
    func checkDistanceQuest(distanceKm: Double) {
        if let index = dailyQuests.firstIndex(where: { $0.title.contains("ÂÖ¨Èáå") }) {
            if distanceKm >= 2.0 {
                dailyQuests[index].progress = 1
            }
        }
    }
    
    func checkCaloriesQuest(calories: Double) {
        if let index = dailyQuests.firstIndex(where: { $0.title.contains("Â§ßÂç°") }) {
            dailyQuests[index].progress += Int(calories)
        }
    }
    
    func unlockAchievement(withTitle title: String) {
        if let index = achievements.firstIndex(where: { $0.title == title }) {
            achievements[index].isUnlocked = true
        }
    }
}
